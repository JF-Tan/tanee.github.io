<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>XX Batch Normalization批量归一化</title>
    <link href="/2022/09/29/XX%20Batch%20Normalization%E6%89%B9%E9%87%8F%E5%BD%92%E4%B8%80%E5%8C%96%20/"/>
    <url>/2022/09/29/XX%20Batch%20Normalization%E6%89%B9%E9%87%8F%E5%BD%92%E4%B8%80%E5%8C%96%20/</url>
    
    <content type="html"><![CDATA[<p>Batch Normalization论文地址：<a href="https://arxiv.org/abs/1502.03167">https://arxiv.org/abs/1502.03167</a></p><p>对于机器学习领域，独立同分布假设是指训练样本与测试样本是满足相同分布的。因此在训练样本上训练得到的模型才能在测试集上得到一个不错的表现。BatchNorm的作用就是在每一层的神经网络输出后保证数据是保持相同分布的。</p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【复现】ShuffleNet-v2</title>
    <link href="/2022/09/21/%E3%80%90%E5%A4%8D%E7%8E%B0%E3%80%91fastestyolo-v2/"/>
    <url>/2022/09/21/%E3%80%90%E5%A4%8D%E7%8E%B0%E3%80%91fastestyolo-v2/</url>
    
    <content type="html"><![CDATA[<p><img src="E:%5Ctakk_blog%5Csource%5Cimg%5C%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84.png" alt="网络结构"></p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【复现】ShuffleNet-v2</title>
    <link href="/2022/09/19/%E3%80%90%E5%A4%8D%E7%8E%B0%E3%80%91ShuffleNet-v2/"/>
    <url>/2022/09/19/%E3%80%90%E5%A4%8D%E7%8E%B0%E3%80%91ShuffleNet-v2/</url>
    
    <content type="html"><![CDATA[<p>论文地址：<a href="https://arxiv.org/abs/1807.11164">https://arxiv.org/abs/1807.11164</a></p><h2 id="1-Channel-Shuffle">1. Channel Shuffle</h2><p>Channel Shuffle是<a href="https://link.zhihu.com/?target=https%3A//arxiv.org/abs/1707.01083">ShuffleNet-v1</a>论文的创新点，可以再保持网络精度的情况下提升计算速度，其思想通过通道间数据交互实现特征可靠性的提升。</p><img src="/img/iabfa.png" alt="iabfa" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">channel_shuffle</span>(<span class="hljs-params">x,groups=<span class="hljs-number">2</span></span>):<br>    b,c,h,w = x.shape<br>    channels_per_group = c//groups<br>    x = x.view(b,groups,channels_per_group,h,w).permute(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>).contiguous().view(b,c,h,w)<br>    <span class="hljs-keyword">return</span> x<br></code></pre></td></tr></table></figure><p>上述代码含义：（以batch_size为1举例）</p><img src="/img/dsgvae.png" alt="dsgvae" style="zoom:50%;" /><h2 id="2-block">2. block</h2><img src="/img/paehigb.png" alt="paehigb" style="zoom:33%;" /><p>将左右两个block分为 Block1 Block2实现：</p><p>Block1 ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">block1</span>(<span class="hljs-params">x</span>):<br>    n,c,h,w = x.shape<br>    c_div_2 = c//<span class="hljs-number">2</span><br>    x1, x2 = x.chunk(<span class="hljs-number">2</span>, dim=<span class="hljs-number">1</span>) <br>    branch1 = nn.Sequential()<br>    branch2 = nn.Sequential(<br>        <span class="hljs-comment"># 1x1 conv</span><br>        nn.Conv2d(c_div_2,c_div_2,kernel_size=<span class="hljs-number">1</span>,bias=<span class="hljs-literal">False</span>),<br>        nn.BatchNorm2d(c_div_2),<br>        nn.ReLU(inplace=<span class="hljs-literal">True</span>),<br>        <span class="hljs-comment"># 3x3 dwconv</span><br>        nn.Conv2d(c_div_2,c_div_2,kernel_size=<span class="hljs-number">3</span>,groups=c_div_2,stride=<span class="hljs-number">1</span>,padding=<span class="hljs-number">1</span>,bias=<span class="hljs-literal">False</span>),<br>        nn.BatchNorm2d(c_div_2),<br>        <span class="hljs-comment"># 1x1 conv</span><br>        nn.Conv2d(c_div_2,c_div_2,kernel_size=<span class="hljs-number">1</span>,bias=<span class="hljs-literal">False</span>),<br>        nn.BatchNorm2d(c_div_2),<br>        nn.ReLU(inplace=<span class="hljs-literal">True</span>),<br>    )<br>    out = torch.cat((branch1(x1),branch2(x2)),dim=<span class="hljs-number">1</span>)<br>    out = channel_shuffle(out,groups=<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">return</span> out<br></code></pre></td></tr></table></figure><p>Block2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">block2</span>(<span class="hljs-params">x</span>):<br>    n,c,h,w = x.shape<br>    c_div_2 = c//<span class="hljs-number">2</span><br>    branch1 = nn.Sequential(<br>        <span class="hljs-comment"># 3x3 dwconv</span><br>        nn.Conv2d(c,c,kernel_size=<span class="hljs-number">3</span>,groups=c_div_2,stride=<span class="hljs-number">2</span>,padding=<span class="hljs-number">1</span>,bias=<span class="hljs-literal">False</span>),<br>        nn.BatchNorm2d(c),<br>        <span class="hljs-comment"># 1x1 conv</span><br>        nn.Conv2d(c,c_div_2,kernel_size=<span class="hljs-number">1</span>,bias=<span class="hljs-literal">False</span>),<br>        nn.BatchNorm2d(c_div_2),<br>        nn.ReLU(inplace=<span class="hljs-literal">True</span>)<br>    )<br>    branch2 = nn.Sequential(<br>        <span class="hljs-comment"># 1x1 conv</span><br>        nn.Conv2d(c,c_div_2,kernel_size=<span class="hljs-number">1</span>,bias=<span class="hljs-literal">False</span>),<br>        nn.BatchNorm2d(c_div_2),<br>        nn.ReLU(inplace=<span class="hljs-literal">True</span>),<br>        <span class="hljs-comment"># 3x3 dwconv</span><br>        nn.Conv2d(c_div_2,c_div_2,kernel_size=<span class="hljs-number">3</span>,groups=c_div_2,stride=<span class="hljs-number">2</span>,padding=<span class="hljs-number">1</span>,bias=<span class="hljs-literal">False</span>),<br>        nn.BatchNorm2d(c_div_2),<br>        <span class="hljs-comment"># 1x1 conv</span><br>        nn.Conv2d(c_div_2,c_div_2,kernel_size=<span class="hljs-number">1</span>,bias=<span class="hljs-literal">False</span>),<br>        nn.BatchNorm2d(c_div_2),<br>        nn.ReLU(inplace=<span class="hljs-literal">True</span>)<br>    )<br>    out = torch.cat((branch1(x),branch2(x)),dim=<span class="hljs-number">1</span>)<br>    out = channel_shuffle(out,groups=<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">return</span> out<br></code></pre></td></tr></table></figure><p>完整的block组装：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Block</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,c,out_channels,stride</span>):<br>        <span class="hljs-built_in">super</span>(Block,self).__init__()<br>        self.stride=stride<br>        c_div_2 = out_channels // <span class="hljs-number">2</span><br>        <span class="hljs-keyword">if</span> stride == <span class="hljs-number">1</span>: <span class="hljs-comment">#block1</span><br>            self.branch1 = nn.Sequential()<br>            self.branch2 = nn.Sequential(<br>                <span class="hljs-comment"># 1x1 conv</span><br>                nn.Conv2d(c_div_2,c_div_2,kernel_size=<span class="hljs-number">1</span>,bias=<span class="hljs-literal">False</span>),<br>                nn.BatchNorm2d(c_div_2),<br>                nn.ReLU(inplace=<span class="hljs-literal">True</span>),<br>                <span class="hljs-comment"># 3x3 dwconv</span><br>                nn.Conv2d(c_div_2,c_div_2,kernel_size=<span class="hljs-number">3</span>,groups=c_div_2,stride=<span class="hljs-number">1</span>,padding=<span class="hljs-number">1</span>,bias=<span class="hljs-literal">False</span>),<br>                nn.BatchNorm2d(c_div_2),<br>                <span class="hljs-comment"># 1x1 conv</span><br>                nn.Conv2d(c_div_2,c_div_2,kernel_size=<span class="hljs-number">1</span>,bias=<span class="hljs-literal">False</span>),<br>                nn.BatchNorm2d(c_div_2),<br>                nn.ReLU(inplace=<span class="hljs-literal">True</span>),<br>            )<br>        <span class="hljs-keyword">elif</span> stride == <span class="hljs-number">2</span>: <span class="hljs-comment">#block2</span><br>            self.branch1 = nn.Sequential(<br>                <span class="hljs-comment"># 3x3 dwconv</span><br>                nn.Conv2d(c,c,kernel_size=<span class="hljs-number">3</span>,groups=c,stride=<span class="hljs-number">2</span>,padding=<span class="hljs-number">1</span>,bias=<span class="hljs-literal">False</span>),<br>                nn.BatchNorm2d(c),<br>                <span class="hljs-comment"># 1x1 conv</span><br>                nn.Conv2d(c,c_div_2,kernel_size=<span class="hljs-number">1</span>,bias=<span class="hljs-literal">False</span>),<br>                nn.BatchNorm2d(c_div_2),<br>                nn.ReLU(inplace=<span class="hljs-literal">True</span>)<br>            )<br>            self.branch2 = nn.Sequential(<br>                <span class="hljs-comment"># 1x1 conv</span><br>                nn.Conv2d(c,c_div_2,kernel_size=<span class="hljs-number">1</span>,bias=<span class="hljs-literal">False</span>),<br>                nn.BatchNorm2d(c_div_2),<br>                nn.ReLU(inplace=<span class="hljs-literal">True</span>),<br>                <span class="hljs-comment"># 3x3 dwconv</span><br>                nn.Conv2d(c_div_2,c_div_2,kernel_size=<span class="hljs-number">3</span>,groups=c_div_2,stride=<span class="hljs-number">2</span>,padding=<span class="hljs-number">1</span>,bias=<span class="hljs-literal">False</span>),<br>                nn.BatchNorm2d(c_div_2),<br>                <span class="hljs-comment"># 1x1 conv</span><br>                nn.Conv2d(c_div_2,c_div_2,kernel_size=<span class="hljs-number">1</span>,bias=<span class="hljs-literal">False</span>),<br>                nn.BatchNorm2d(c_div_2),<br>                nn.ReLU(inplace=<span class="hljs-literal">True</span>)<br>            )<br>    <br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self,x</span>):<br>        <span class="hljs-keyword">if</span> self.stride == <span class="hljs-number">1</span>: <span class="hljs-comment">#block1</span><br>            x1, x2 = x.chunk(<span class="hljs-number">2</span>, dim=<span class="hljs-number">1</span>) <br>            out = torch.cat((self.branch1(x1),self.branch2(x2)),dim=<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">elif</span> self.stride == <span class="hljs-number">2</span>: <span class="hljs-comment">#block1</span><br>            out = torch.cat((self.branch1(x),self.branch2(x)),dim=<span class="hljs-number">1</span>)<br>        out = channel_shuffle(out,groups=<span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">return</span> out<br></code></pre></td></tr></table></figure><h2 id="3-网络结构">3. 网络结构</h2><p><img src="https://img-blog.csdn.net/2018073122441059?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQzODAxNjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="è¿éåå¾çæè¿°"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ShuffleNetV2</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, class_num=<span class="hljs-number">10</span></span>):<br>        <span class="hljs-built_in">super</span>(ShuffleNetV2,self).__init__()<br>        self.conv1 = nn.Sequential(<br>                nn.Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">24</span>, <span class="hljs-number">3</span>, stride=<span class="hljs-number">2</span>, padding=<span class="hljs-number">1</span>, bias=<span class="hljs-literal">False</span>),<br>                nn.BatchNorm2d(<span class="hljs-number">24</span>),<br>                nn.ReLU(inplace=<span class="hljs-literal">True</span>)<br>        )<br>        self.maxpool = nn.MaxPool2d(kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">2</span>, padding=<span class="hljs-number">1</span>)<br>        self.conv5 = nn.Sequential(<br>                nn.Conv2d(<span class="hljs-number">192</span>, <span class="hljs-number">1024</span>, <span class="hljs-number">1</span>, bias=<span class="hljs-literal">False</span>),<br>                nn.BatchNorm2d(<span class="hljs-number">1024</span>),<br>                nn.ReLU(inplace=<span class="hljs-literal">True</span>)<br>        )<br>        self.stage2= nn.Sequential(<br>            Block(<span class="hljs-number">24</span>, <span class="hljs-number">48</span>, <span class="hljs-number">2</span>),<br>            Block(<span class="hljs-number">48</span>, <span class="hljs-number">48</span>, <span class="hljs-number">1</span>)<br>        )<br>        self.stage3= nn.Sequential(<br>            Block(<span class="hljs-number">48</span>, <span class="hljs-number">116</span>, <span class="hljs-number">2</span>),<br>            Block(<span class="hljs-number">116</span>, <span class="hljs-number">116</span>, <span class="hljs-number">1</span>)<br>        )<br>        self.stage4= nn.Sequential(<br>            Block(<span class="hljs-number">116</span>, <span class="hljs-number">192</span>, <span class="hljs-number">2</span>),<br>            Block(<span class="hljs-number">192</span>, <span class="hljs-number">192</span>, <span class="hljs-number">1</span>)<br>        )<br>        self.avgpool = nn.AdaptiveAvgPool2d(<span class="hljs-number">1</span>)<br>        self.fc = nn.Linear(<span class="hljs-number">1024</span>, class_num)<br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.conv1(x)<br>        x = self.maxpool(x)<br>        <span class="hljs-comment"># ---- stage 2 ----- repeat x1</span><br>        x = self.stage2(x)<br>        <span class="hljs-comment"># ---- stage 3 ----- repeat x1</span><br>        x = self.stage3(x)<br>        <span class="hljs-comment"># ---- stage 4 ----- repeat x1</span><br>        x = self.stage4(x)<br>        <span class="hljs-comment">#-------------------------</span><br>        x = self.conv5(x)<br>        x = self.avgpool(x)<br>        x = x.flatten(<span class="hljs-number">1</span>)<br>        x = self.fc(x)<br>        <span class="hljs-keyword">return</span> x.squeeze(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>研究中的论文</title>
    <link href="/2022/09/19/%E7%A0%94%E7%A9%B6%E4%B8%AD%E7%9A%84%E8%AE%BA%E6%96%87/"/>
    <url>/2022/09/19/%E7%A0%94%E7%A9%B6%E4%B8%AD%E7%9A%84%E8%AE%BA%E6%96%87/</url>
    
    <content type="html"><![CDATA[<p><strong><a href="https://github.com/dog-qiuqiu/Yolo-Fastest">YOLO-FastestV2</a></strong></p><p><strong><a href="https://github.com/dog-qiuqiu/FastestDet">FastestDet</a></strong></p><p>上述两个模型backbone都是shufflenetv2需要看。</p>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>info</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01 概率分布</title>
    <link href="/2022/09/17/01%20%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83/"/>
    <url>/2022/09/17/01%20%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83/</url>
    
    <content type="html"><![CDATA[<h1>01 概率分布</h1><h5 id="前言：想了又想，还是从最基础的数学写起吧，便于整个后续文章的逻辑性与连续完整性。前提需要补充一点点的概率论基础。">前言：想了又想，还是从最基础的数学写起吧，便于整个后续文章的逻辑性与连续完整性。前提需要补充一点点的概率论基础。</h5><h2 id="1-概率基础">1.概率基础</h2><p><strong>随机变量</strong>：随机变量是在概率论最基础也最重要的概念之一，本章所主要讨论的概率分布就是以其为基础展开的。随机变量即为在随机事件活动中产生结果的数值。其本质是一种映射从随机事件结果到数值。虽然很抽象，但我们可以利用初等数学知识来从函数映射的角度去讨论：</p><p>我们可以认为随机变量是一个函数，自变量是事件，函数值是某种约定下的数值。</p><ol><li><p>一个随机事件可能出现的所有随机结果组成的空间记为 Ω</p></li><li><p>随机变量 X 是 Ω上的函数，或者称为Ω上的映射</p></li><li><p>映射结果即为函数值，∀α∈Ω，X(α)</p><img src="/img/1663439712822.png" alt="1663439712822" style="zoom:50%;" /></li></ol><p>举个栗子，抛硬币，0代表正面，1代表反面。上述约定其实就是随机变量的映射，将抛硬币这个试验的所有结果{正面，反面}映射到了数值{0,1}。</p><p><strong>概率函数</strong>：对于随机变量X，定义一个概率函数为 f ，其给出了随机变量为每一个值的概率，如抛硬币：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>X</mi><mo>=</mo><mn>0</mn><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mtext>，</mtext><mi>P</mi><mo stretchy="false">(</mo><mi>X</mi><mo>=</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">P(X=0)=\frac{1}{2}，P(X=1)=\frac{1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord cjk_fallback">，</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac><mo separator="true">,</mo><mi>X</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac><mo separator="true">,</mo><mi>X</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">f(X)=\left\{\begin{matrix}   \frac{1}{2},X=0 \\    \frac{1}{2},X=1\end{matrix}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4102em;vertical-align:-0.9551em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4551em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span><span style="top:-2.4049em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9551em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><strong>期望</strong>：期望是对随机变量中心位置的描述。或者可以说是一种加权平均。</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">Σ</mi><mi>x</mi><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">E(X)=\Sigma xf(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Σ</span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></span></p><p>举个栗子，一个面额5元的刮刮奖抽奖例子：</p><table><thead><tr><th></th><th>一等奖</th><th>二等奖</th><th>三等奖</th><th>谢谢参与</th></tr></thead><tbody><tr><td>金额</td><td>100000</td><td>5000</td><td>200</td><td>0</td></tr><tr><td>概率</td><td>0.001%</td><td>0.999%</td><td>5%</td><td>94%</td></tr></tbody></table><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mn>100000</mn><mo>×</mo><mn>0.00001</mn><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>5000</mn><mo>×</mo><mn>0.00999</mn><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>200</mn><mo>×</mo><mn>0.05</mn><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>0</mn><mo>×</mo><mn>0.94</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">E(X)=(100000×0.00001) + (5000 × 0.00999) + (200×0.05) + (0×0.94)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">100000</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0.00001</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">5000</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0.00999</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">200</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0.05</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0.94</span><span class="mclose">)</span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mn>60.9500</mn></mrow><annotation encoding="application/x-tex">E(X)=60.9500</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">60.9500</span></span></span></span></span></p><p>上式说明了，平均情况下玩一把刮刮奖可以中60块钱左右，但是是否是刮一张花5块钱我们就能赢得60呢？显然不对。并不刮一张能赢60。比如刮了100张最后一张中了6000块，那么平均来看仍然是刮一张平摊可以得到60元，但面临着刮前面99张都不中1分钱的风险！这也是彩票看着很容易中大奖但是实际各位在玩彩票时都是几乎亏钱的状态。这时就引入了方差的概念为我们解释原因。</p><p><strong>方差</strong>：方差用于衡量随机变量与随机变量的平均值之间的偏离程度（变量和期望的差），也可以说是其在衡量变量的离散程度 ：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>D</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mi>E</mi><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi>D</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">Σ</mi><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">D(X)=E((x-μ)^2)\\D(X)=\Sigma (x-μ)^2f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">((</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Σ</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></span></p><p>上式中，μ为X的期望。在本例中：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>μ</mi><mo>=</mo><mn>60.9500</mn></mrow><annotation encoding="application/x-tex">μ=60.9500</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">60.9500</span></span></span></span></span></p><p>则方差为：</p><table><thead><tr><th></th><th>一等奖</th><th>二等奖</th><th>三等奖</th><th>谢谢参与</th></tr></thead><tbody><tr><td>金额</td><td>100000</td><td>5000</td><td>200</td><td>0</td></tr><tr><td>概率</td><td>0.001%</td><td>0.999%</td><td>5%</td><td>94%</td></tr><tr><td>与中心偏移平方 (x-μ)^2</td><td>9987800000</td><td>24394215</td><td>19335</td><td>3715</td></tr><tr><td>对应概率下与中心偏移平方 f(x)*(x-μ)^2</td><td>99878</td><td>243698</td><td>967</td><td>3492</td></tr></tbody></table><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>D</mi><mo>=</mo><mn>348035</mn></mrow><annotation encoding="application/x-tex">D=348035</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">348035</span></span></span></span></span></p><p>方差越大可以看出平均来看每一次的刮刮奖得到结果与平均情况来说差异性很大。也就是说刮一次能得到平均期望60块是一件很不可靠的事情，因为方差（偏差）太大。</p><p><strong>标准差:</strong> 当然我们在计算方差时用的是平方来衡量随机变量与平均情况下的偏差，由此通过根号我们可以同一量纲，即引入了标准差的概念：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>σ</mi><mo>=</mo><msqrt><mi>D</mi></msqrt><mspace linebreak="newline"></mspace><mi>σ</mi><mo>=</mo><mn>589</mn></mrow><annotation encoding="application/x-tex">\sigma = \sqrt{D} \\\sigma = 589</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.0645em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9755em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span><span style="top:-2.9355em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.0645em;"><span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">589</span></span></span></span></span></p><p>标准差也可以举一个例子，比如对于学生一次考试成绩分布情况，平均分是70，方差是49，标准差是7。那么用方差衡量考生成绩的成绩就太过了，因为它是偏差的平方量级。因此通常用标准差来衡量与平均值差异程度。</p><h2 id="2-概率分布">2.概率分布</h2><p>概率分布简单来说就是随机变量取值与其对应概率之间的关系。</p><h3 id="2-1-正态分布">2.1 正态分布</h3><p>正态分布也叫高斯分布，是一种连续型随机变量的分布函数，很多事件的概率分布都满足正态分布这一规律，其实我们从中心极限定理可以知道：一定条件下 只要n足够大,大量独立随机变量的平均数是以正态分布为极限的。</p><p>对于正态分布，我们可以先看看图形：</p><p><img src="/img/knvaf.jpg" alt="knvaf"></p><p>该图是一个 期望为0，标准差是1的正态分布。那么大家可以看出，在自变量取值为0时，对应概率最大。且在随机变量取值为0的附件概率都非常大。按照之前的理解，期望是随机变量的一个平均结果。</p><p>那么为什么说生活中很多事物都是满足正态分布的呢？例子太多了，比如一个城市的房价：</p><table><thead><tr><th>A楼盘</th><th>B楼盘</th><th>C楼盘</th><th>D楼盘</th><th>E楼盘</th></tr></thead><tbody><tr><td>2万/平</td><td>1万/平</td><td>9千/平</td><td>2.4万/平</td><td>1.5万/平</td></tr></tbody></table><p>由上图结合生活常识可以知道，目前房价基本都是几千到上万不等。但是都集中在千元，万元这个量级附近。再大胆一点，我们估计大部分房价会接近一个值比如10000元，我们猜测期望也许就是在这个值附近。从这个值到数轴两端出现楼盘有房价的概率会越来越低。比如1万/平 10个楼盘在卖，5000/平可能有3个楼盘卖，5000/平可能有1个楼盘卖，低于1000/平的楼盘估计一个没有吧，如果更低呢，10元/平。或者往高了说，1亿/平的价格…但其实它们是有概率的，不能绝对说概率为0，可以用极限的定义来说明：存在一个价格N，当房价取值大于N时，任意给定一个正数a，概率都小于a。</p><p>扯远了，我们再举一个例子，体重！ 成年人正常大部分人体重大概在70~300斤内吧，而且很多会集中在100斤或者90斤，那么越往数轴两端观察会发现对应的人越来越少。超过500斤的人屈指可数吧，超过1000斤的人呢？</p><p>正态分布的概率密度函数：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><msqrt><mrow><mn>2</mn><mi>π</mi></mrow></msqrt><mi>σ</mi></mrow></mfrac><mi>e</mi><mi>x</mi><mi>p</mi><mo stretchy="false">(</mo><mo>−</mo><mfrac><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><mrow><mn>2</mn><msup><mi>σ</mi><mn>2</mn></msup></mrow></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)=\frac{1}{\sqrt{2\pi}\sigma}exp(-\frac{(x-μ)^2}{2\sigma^{2}})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4211em;vertical-align:-0.93em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.2028em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9072em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span></span><span style="top:-2.8672em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1328em;"><span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></span></p><h3 id="2-2-二项分布">2.2 二项分布</h3><h3 id="2-2-多项分布">2.2 多项分布</h3>]]></content>
    
    
    <categories>
      
      <category>深度学习-数学基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>start</title>
    <link href="/2022/09/16/start/"/>
    <url>/2022/09/16/start/</url>
    
    <content type="html"><![CDATA[<p>开始在博客上更新技术文档与学习记录。内容涉及机器学习、深度学习、Zynq、FPGA、图像处理、激光超声等领域。</p>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>info</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>考研资料</title>
    <link href="/2022/09/16/%E8%80%83%E7%A0%94%E8%B5%84%E6%96%99/"/>
    <url>/2022/09/16/%E8%80%83%E7%A0%94%E8%B5%84%E6%96%99/</url>
    
    <content type="html"><![CDATA[<p>数学：<a href="https://pan.baidu.com/s/1FXuhJDODUzSeeD3nW0JQ7w?pwd=1234">https://pan.baidu.com/s/1FXuhJDODUzSeeD3nW0JQ7w?pwd=1234</a><br>英语：<a href="https://pan.baidu.com/s/1XKKh9n1VqYpvgNvBmcTThw?pwd=1234">https://pan.baidu.com/s/1XKKh9n1VqYpvgNvBmcTThw?pwd=1234</a><br>政治：<a href="https://pan.baidu.com/s/1ZYifgBUO2lDiEdOVeWBaEg?pwd=1234">https://pan.baidu.com/s/1ZYifgBUO2lDiEdOVeWBaEg?pwd=1234</a><br>计算机：</p><p>开始在博客上更新技术文档与学习记录。内容涉及机器学习、深度学习、Zynq、FPGA、图像处理、激光超声等领域。</p>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>info</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PYNQ安装torch框架</title>
    <link href="/2020/03/12/%E3%80%90%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E3%80%91PYNQ%E5%AE%89%E8%A3%85torch%E6%A1%86%E6%9E%B6/"/>
    <url>/2020/03/12/%E3%80%90%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E3%80%91PYNQ%E5%AE%89%E8%A3%85torch%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<p>当前环境：</p><p>软件环境：PYNQ镜像2.7 + python3.8 （无虚拟环境）</p><p>硬件：pynqz2 + armv7l</p><p>在官方仓库找到想要版本的torch和torchvision <a href="https://torch.kmtea.eu/whl/stable-cn.html%E3%80%82">https://torch.kmtea.eu/whl/stable-cn.html。</a></p><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\1663764312411.png" alt="1663764312411" style="zoom: 33%;" /><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\1663764332781.png" alt="1663764332781" style="zoom:33%;" /><p>下载后复制到板子上：</p><p><img src="C:%5CUsers%5Clenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1663764375521.png" alt="1663764375521"></p><p>执行：</p><p><img src="C:%5CUsers%5Clenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1663764400113.png" alt="1663764400113"></p><p><img src="C:%5CUsers%5Clenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1663764409343.png" alt="1663764409343"></p><p>分别安装，然后重启即可。</p><p><img src="C:%5CUsers%5Clenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1663764466621.png" alt="1663764466621"></p>]]></content>
    
    
    <categories>
      
      <category>环境安装配置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
